// This file is auto-generated by @hey-api/openapi-ts

export type AuthToken = {
  username: string;
  password: string;
  readonly token: string;
};

/**
 * Serializer class for Comment model.
 */
export type Comment = {
  readonly id: string;
  readonly author_name: string;
  readonly created: string;
  readonly modified: string;
  content: string;
  is_removed?: boolean;
  post: string;
  author: number;
};

/**
 * Serializer to validate and serialize a message.
 */
export type Message = {
  message: string;
};

export type PaginatedCommentList = {
  count: number;
  next?: string | null;
  previous?: string | null;
  results: Array<Comment>;
};

export type PaginatedPostList = {
  count: number;
  next?: string | null;
  previous?: string | null;
  results: Array<Post>;
};

export type PaginatedUserList = {
  count: number;
  next?: string | null;
  previous?: string | null;
  results: Array<User>;
};

/**
 * Serializer for the User model.
 */
export type PatchedUser = {
  readonly id?: number;
  email?: string;
  /**
   * Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
   */
  is_active?: boolean;
  /**
   * Designates whether the user can log into this admin site.
   */
  is_staff?: boolean;
  /**
   * Designates that this user has all permissions without explicitly assigning them.
   */
  is_superuser?: boolean;
  readonly created?: string;
  readonly modified?: string;
  last_login?: string | null;
};

/**
 * Serializer for the Post model.
 *
 * This serializer automatically generates fields based on the Post model.
 * It includes all the fields of the model for comprehensive data handling.
 */
export type Post = {
  readonly id: string;
  readonly comments: Array<Comment>;
  readonly author_name: string;
  readonly created: string;
  readonly modified: string;
  title: string;
  content: string;
  is_draft?: boolean;
  author: number;
};

/**
 * Serializer for the User model.
 */
export type User = {
  readonly id: number;
  email: string;
  /**
   * Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
   */
  is_active?: boolean;
  /**
   * Designates whether the user can log into this admin site.
   */
  is_staff?: boolean;
  /**
   * Designates that this user has all permissions without explicitly assigning them.
   */
  is_superuser?: boolean;
  readonly created: string;
  readonly modified: string;
  last_login?: string | null;
};

export type ApiCommentsListData = {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
};

export type ApiCommentsListResponse = PaginatedCommentList;

export type ApiCommentsCreateData = {
  requestBody: Comment;
};

export type ApiCommentsCreateResponse = Comment;

export type ApiCommentsRetrieveData = {
  /**
   * A UUID string identifying this comment.
   */
  id: string;
};

export type ApiCommentsRetrieveResponse = Comment;

export type ApiCommentsUpdateData = {
  /**
   * A UUID string identifying this comment.
   */
  id: string;
  requestBody: Comment;
};

export type ApiCommentsUpdateResponse = Comment;

export type ApiCommentsDestroyData = {
  /**
   * A UUID string identifying this comment.
   */
  id: string;
};

export type ApiCommentsDestroyResponse = void;

export type ApiObtainAuthTokenCreateData = {
  formData: AuthToken;
};

export type ApiObtainAuthTokenCreateResponse = AuthToken;

export type ApiPostsListData = {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
};

export type ApiPostsListResponse = PaginatedPostList;

export type ApiPostsCreateData = {
  requestBody: Post;
};

export type ApiPostsCreateResponse = Post;

export type ApiPostsRetrieveData = {
  /**
   * A UUID string identifying this post.
   */
  id: string;
};

export type ApiPostsRetrieveResponse = Post;

export type ApiPostsUpdateData = {
  /**
   * A UUID string identifying this post.
   */
  id: string;
  requestBody: Post;
};

export type ApiPostsUpdateResponse = Post;

export type ApiPostsDestroyData = {
  /**
   * A UUID string identifying this post.
   */
  id: string;
};

export type ApiPostsDestroyResponse = void;

export type ApiPostsList2Data = {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
  slug: string;
};

export type ApiPostsList2Response = PaginatedPostList;

export type ApiPostsCreate2Data = {
  requestBody: Post;
  slug: string;
};

export type ApiPostsCreate2Response = Post;

export type ApiPostsRetrieve2Data = {
  /**
   * A UUID string identifying this post.
   */
  id: string;
  slug: string;
};

export type ApiPostsRetrieve2Response = Post;

export type ApiPostsUpdate2Data = {
  /**
   * A UUID string identifying this post.
   */
  id: string;
  requestBody: Post;
  slug: string;
};

export type ApiPostsUpdate2Response = Post;

export type ApiPostsDestroy2Data = {
  /**
   * A UUID string identifying this post.
   */
  id: string;
  slug: string;
};

export type ApiPostsDestroy2Response = void;

export type ApiRestRestCheckRetrieveResponse = Message;

export type ApiUsersListData = {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
};

export type ApiUsersListResponse = PaginatedUserList;

export type ApiUsersCreateData = {
  requestBody: User;
};

export type ApiUsersCreateResponse = User;

export type ApiUsersRetrieveData = {
  /**
   * A unique integer value identifying this user.
   */
  id: number;
};

export type ApiUsersRetrieveResponse = User;

export type ApiUsersUpdateData = {
  /**
   * A unique integer value identifying this user.
   */
  id: number;
  requestBody: User;
};

export type ApiUsersUpdateResponse = User;

export type ApiUsersPartialUpdateData = {
  /**
   * A unique integer value identifying this user.
   */
  id: number;
  requestBody?: PatchedUser;
};

export type ApiUsersPartialUpdateResponse = User;

export type ApiUsersDestroyData = {
  /**
   * A unique integer value identifying this user.
   */
  id: number;
};

export type ApiUsersDestroyResponse = void;

export type ApiUsersList2Data = {
  /**
   * Number of results to return per page.
   */
  limit?: number;
  /**
   * The initial index from which to return the results.
   */
  offset?: number;
  slug: string;
};

export type ApiUsersList2Response = PaginatedUserList;

export type ApiUsersCreate2Data = {
  requestBody: User;
  slug: string;
};

export type ApiUsersCreate2Response = User;

export type ApiUsersRetrieve2Data = {
  /**
   * A unique integer value identifying this user.
   */
  id: number;
  slug: string;
};

export type ApiUsersRetrieve2Response = User;

export type ApiUsersUpdate2Data = {
  /**
   * A unique integer value identifying this user.
   */
  id: number;
  requestBody: User;
  slug: string;
};

export type ApiUsersUpdate2Response = User;

export type ApiUsersPartialUpdate2Data = {
  /**
   * A unique integer value identifying this user.
   */
  id: number;
  requestBody?: PatchedUser;
  slug: string;
};

export type ApiUsersPartialUpdate2Response = User;

export type ApiUsersDestroy2Data = {
  /**
   * A unique integer value identifying this user.
   */
  id: number;
  slug: string;
};

export type ApiUsersDestroy2Response = void;

export type $OpenApiTs = {
  "/api/comments/": {
    get: {
      req: ApiCommentsListData;
      res: {
        200: PaginatedCommentList;
      };
    };
    post: {
      req: ApiCommentsCreateData;
      res: {
        201: Comment;
      };
    };
  };
  "/api/comments/{id}/": {
    get: {
      req: ApiCommentsRetrieveData;
      res: {
        200: Comment;
      };
    };
    put: {
      req: ApiCommentsUpdateData;
      res: {
        200: Comment;
      };
    };
    delete: {
      req: ApiCommentsDestroyData;
      res: {
        /**
         * No response body
         */
        204: void;
      };
    };
  };
  "/api/obtain-auth-token/": {
    post: {
      req: ApiObtainAuthTokenCreateData;
      res: {
        200: AuthToken;
      };
    };
  };
  "/api/posts/": {
    get: {
      req: ApiPostsListData;
      res: {
        200: PaginatedPostList;
      };
    };
    post: {
      req: ApiPostsCreateData;
      res: {
        201: Post;
      };
    };
  };
  "/api/posts/{id}/": {
    get: {
      req: ApiPostsRetrieveData;
      res: {
        200: Post;
      };
    };
    put: {
      req: ApiPostsUpdateData;
      res: {
        200: Post;
      };
    };
    delete: {
      req: ApiPostsDestroyData;
      res: {
        /**
         * No response body
         */
        204: void;
      };
    };
  };
  "/api/posts/{slug}/": {
    get: {
      req: ApiPostsList2Data;
      res: {
        200: PaginatedPostList;
      };
    };
    post: {
      req: ApiPostsCreate2Data;
      res: {
        201: Post;
      };
    };
  };
  "/api/posts/{slug}/{id}/": {
    get: {
      req: ApiPostsRetrieve2Data;
      res: {
        200: Post;
      };
    };
    put: {
      req: ApiPostsUpdate2Data;
      res: {
        200: Post;
      };
    };
    delete: {
      req: ApiPostsDestroy2Data;
      res: {
        /**
         * No response body
         */
        204: void;
      };
    };
  };
  "/api/rest/rest-check/": {
    get: {
      res: {
        200: Message;
      };
    };
  };
  "/api/users/": {
    get: {
      req: ApiUsersListData;
      res: {
        200: PaginatedUserList;
      };
    };
    post: {
      req: ApiUsersCreateData;
      res: {
        201: User;
      };
    };
  };
  "/api/users/{id}/": {
    get: {
      req: ApiUsersRetrieveData;
      res: {
        200: User;
      };
    };
    put: {
      req: ApiUsersUpdateData;
      res: {
        200: User;
      };
    };
    patch: {
      req: ApiUsersPartialUpdateData;
      res: {
        200: User;
      };
    };
    delete: {
      req: ApiUsersDestroyData;
      res: {
        /**
         * No response body
         */
        204: void;
      };
    };
  };
  "/api/users/{slug}/": {
    get: {
      req: ApiUsersList2Data;
      res: {
        200: PaginatedUserList;
      };
    };
    post: {
      req: ApiUsersCreate2Data;
      res: {
        201: User;
      };
    };
  };
  "/api/users/{slug}/{id}/": {
    get: {
      req: ApiUsersRetrieve2Data;
      res: {
        200: User;
      };
    };
    put: {
      req: ApiUsersUpdate2Data;
      res: {
        200: User;
      };
    };
    patch: {
      req: ApiUsersPartialUpdate2Data;
      res: {
        200: User;
      };
    };
    delete: {
      req: ApiUsersDestroy2Data;
      res: {
        /**
         * No response body
         */
        204: void;
      };
    };
  };
};
